package com.luxtracon.floralis.common.world.feature;

import com.luxtracon.floralis.common.config.FloralisConfig;
import com.luxtracon.floralis.common.config.FloralisFeaturesConfig;
import com.luxtracon.floralis.common.registry.FloralisBlocks;

import net.minecraft.core.Holder;
import net.minecraft.data.worldgen.features.FeatureUtils;
import net.minecraft.data.worldgen.placement.PlacementUtils;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;

public class FloralisConfiguredFeatures {
	private static final int TRIES_FLOWER = FloralisConfig.SPEC.isLoaded() ? FloralisFeaturesConfig.TRIES_FLOWER.get() : FloralisFeaturesConfig.TRIES_FLOWER.getDefault();
	private static final int SPREAD_FLOWER = FloralisConfig.SPEC.isLoaded() ? FloralisFeaturesConfig.SPREAD_FLOWER.get() : FloralisFeaturesConfig.SPREAD_FLOWER.getDefault();
	private static final int TRIES_CACTUS = FloralisConfig.SPEC.isLoaded() ? FloralisFeaturesConfig.TRIES_CACTUS.get() : FloralisFeaturesConfig.TRIES_CACTUS.getDefault();
	private static final int SPREAD_CACTUS = FloralisConfig.SPEC.isLoaded() ? FloralisFeaturesConfig.SPREAD_CACTUS.get() : FloralisFeaturesConfig.SPREAD_CACTUS.getDefault();

	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> WHITE_FLOWER = FeatureUtils.register("white_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.WHITE_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> ORANGE_FLOWER = FeatureUtils.register("orange_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.ORANGE_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> MAGENTA_FLOWER = FeatureUtils.register("magenta_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.MAGENTA_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> LIGHT_BLUE_FLOWER = FeatureUtils.register("light_blue_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.LIGHT_BLUE_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> YELLOW_FLOWER = FeatureUtils.register("yellow_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.YELLOW_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> LIME_FLOWER = FeatureUtils.register("lime_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.LIME_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PINK_FLOWER = FeatureUtils.register("pink_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.PINK_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> GRAY_FLOWER = FeatureUtils.register("gray_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.GRAY_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> LIGHT_GRAY_FLOWER = FeatureUtils.register("light_gray_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.LIGHT_GRAY_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> CYAN_FLOWER = FeatureUtils.register("cyan_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.CYAN_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PURPLE_FLOWER = FeatureUtils.register("purple_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.PURPLE_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> BLUE_FLOWER = FeatureUtils.register("blue_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.BLUE_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> BROWN_FLOWER = FeatureUtils.register("brown_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.BROWN_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> GREEN_FLOWER = FeatureUtils.register("green_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.GREEN_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> RED_FLOWER = FeatureUtils.register("red_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.RED_FLOWER.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> BLACK_FLOWER = FeatureUtils.register("black_flower", Feature.FLOWER, new RandomPatchConfiguration(TRIES_FLOWER, SPREAD_FLOWER, SPREAD_FLOWER, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.BLACK_FLOWER.get())))));

	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> WHITE_CACTUS = FeatureUtils.register("white_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.WHITE_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> ORANGE_CACTUS = FeatureUtils.register("orange_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.ORANGE_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> MAGENTA_CACTUS = FeatureUtils.register("magenta_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.MAGENTA_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> LIGHT_BLUE_CACTUS = FeatureUtils.register("light_blue_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.LIGHT_BLUE_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> YELLOW_CACTUS = FeatureUtils.register("yellow_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.YELLOW_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> LIME_CACTUS = FeatureUtils.register("lime_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.LIME_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PINK_CACTUS = FeatureUtils.register("pink_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.PINK_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> GRAY_CACTUS = FeatureUtils.register("gray_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.GRAY_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> LIGHT_GRAY_CACTUS = FeatureUtils.register("light_gray_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.LIGHT_GRAY_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> CYAN_CACTUS = FeatureUtils.register("cyan_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.CYAN_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PURPLE_CACTUS = FeatureUtils.register("purple_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.PURPLE_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> BLUE_CACTUS = FeatureUtils.register("blue_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.BLUE_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> BROWN_CACTUS = FeatureUtils.register("brown_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.BROWN_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> GREEN_CACTUS = FeatureUtils.register("green_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.GREEN_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> RED_CACTUS = FeatureUtils.register("red_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.RED_CACTUS.get())))));
	public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> BLACK_CACTUS = FeatureUtils.register("black_cactus", Feature.FLOWER, new RandomPatchConfiguration(TRIES_CACTUS, SPREAD_CACTUS, SPREAD_CACTUS, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(FloralisBlocks.BLACK_CACTUS.get())))));
}
